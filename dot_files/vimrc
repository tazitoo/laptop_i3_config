" These lines setup the environment to show graphics and colors correctly.
set nocompatible
" get pathogen to manage plugins
execute pathogen#infect()
"

" this next line stop annoying 'Hit ENTER to continue...'
set shortmess+=F
set cmdheight=2  " kept just in case...

" set up colorscheme
set t_Co=256
set background=dark
colorscheme CandyPaper

syntax on
set hlsearch
set backspace=indent,eol,start  " backspace over everythin
set showmatch
set autoindent
set backup
set backupdir=/tmp
set history=50
set ruler
set showcmd
set incsearch
set vb t_vb=   "turns off error beep
set tabstop=4
set number  " shown in powerline
set cursorline
let python_highlight_all = 1


if has("autocmd")
    filetype plugin indent on
    set shiftwidth=4
    set shiftround

    autocmd FileType text setlocal textwidth=100

    " remember cursor position
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

set expandtab

 
 
let g:minBufExplForceSyntaxEnable = 1
e
if ! has('gui_running')
   set ttimeoutlen=10
   augroup FastEscape
      autocmd!
      au InsertEnter * set timeoutlen=0
      au InsertLeave * set timeoutlen=1000
   augroup END
endif

" ale set up
" Enable completion where available.
" This setting must be set before ALE is loaded.
"
" You should not turn this setting on if you wish to use ALE as a completion
" source for other completion plugins, like Deoplete.
"let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1

let g:ale_linters = {'python': ['pycodestyle', 'pylint']}
let b:ale_fixers= {'python': ['black', 'isort']}
let g:ale_fixers= {'python': ['black', 'isort']}
command! -range=% Isort :<line1>,<line2>! isort -
let g:ale_fix_on_save = 1

" bind F6 to 'fix'
nmap <F6> <Plug>(ale_fix)

let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

" Write this in your vimrc file
"let g:ale_set_loclist = 0
"let g:ale_set_quickfix = 1
"set completeopt=menu,menuone,preview,noselect,noinsert
"autocmd FileType python setlocal completeopt-=preview
set completeopt-=preview

" tab key mapping
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

"slimux
nnoremap <C-c><C-v> :SlimuxREPLConfigure<CR>
nnoremap <C-c><C-c> :SlimuxREPLSendLine<CR>
vnoremap <C-c><C-c> :SlimuxREPLSendLine<CR>
map <C-c>a :SlimuxShellLast<CR>
map <C-c>b :SlimuxREPLSendBuffer<CR>
map <C-c>k :SlimuxSendKeysLast<CR>


" kite set up
" don't like it since it needs a 'copilot' window open
"set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
"set laststatus=2  " always display the status line
"let g:kite_tab_complete=1
"set completeopt+=menuone   " show the popup menu even when there is only 1 match
"set completeopt+=noinsert  " don't insert any text until user chooses a match
"set completeopt-=longest   " don't insert the longest common text
"set completeopt+=preview

autocmd CompleteDone * if !pumvisible() | pclose | endif


" set up powerline
set rtp+=/home/brian/anaconda3/lib/python3.7/site-packages/powerline/bindings/vim
"set rtp+=/usr/lib/python3/dist-packages/powerline/bindings/vim

set laststatus=2 " Always display the statusline in all windows
set showtabline=2 " Always display the tabline, even if there is only one tab
set guifont=Inconsolata\ for\ Powerline:h14
set noshowmode
